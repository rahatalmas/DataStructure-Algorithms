*** insertion 
-> a node can be added in a linked list in three ways 
   1-> At the front of a the linked list
   2-> after a given node
   3-> at the end of the linked list

*** add a node at the front : 
 -> the node is always added before the head of the given linked list. 
    And newly added node becomes teh new head of the linked list. call 
    a function push that adds at the front of the list is Push().we must
    receive a pointer to the head pointer,because must change the head 
    pointer to point to the new node.
    make a new node . give data to new node. new node next = head andf
    head = new node. return head. 
    time complexity is O(1) as it does a constant amount of work

*** Add a node after a given node: (5 steps process) 
    We are given a pointer to a node, and the new node is inserted after 
    the given node.
    
    -> check if the prev node is null or not
      if null return;
    -> allocate new node
    -> put in the data
    -> make next of new node as next of prev node
    -> move the next of prev node as newnode;
 
 ***Add a node at the end: (6 steps process) 
    -> allocate node 
    -> put in the data
    -> this new node is going to be the last node, 
       so make of it as null
    -> if the linked list is empty, then make the new node
       as head and return
    -> else traverse till the last node
    -> change the next of last node
       return;
    -> time complexity O(n);
    
